#+title: Doom Emacs
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+AUTHOR: Rasmus Enevoldsen

* Table :toc:
- [[#doom-emacs-config][DOOM Emacs config]]
- [[#name--email][Name & Email]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#org-mode][Org-mode]]
  - [[#directories][Directories]]
  - [[#latex][LaTeX]]
  - [[#org-modern][Org-modern]]
  - [[#anki][Anki]]
  - [[#org-roam][Org-roam]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#org-download][Org-download]]
  - [[#images][Images]]

* DOOM Emacs config
To Tangle a document press =

#+begin_src elisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

* Name & Email
#+begin_src elisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Rasmus Enevoldsen"
      user-mail-address "rasmus@enev.dk")
#+end_src

* Fonts
#+begin_src elisp :tangle yes
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "JetBrains Mono" :size 16)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 17)
     doom-symbol-font (font-spec :family "Nerd Font" :size 17)
     doom-serif-font (font-spec :family "JetBrains Mono" :size 16))

#+end_src

* Theme
#+begin_src elisp :tangle yes
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; https://github.com/doomemacs/themes/tree/screenshots
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/.local/share/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


#+end_src

* Org-mode
https://upload.wikimedia.org/wikipedia/commons/thumb/a/a6/Org-mode-unicorn.svg/1200px-Org-mode-unicorn.svg.png

** Directories

#+begin_src elisp :tangle yes
(setq org-directory "~/Documents/org/"
      org-roam-directory "~/Documents/org/roam")
#+end_src

** LaTeX
#+begin_src elisp :tangle yes
(defun my/text-scale-adjust-latex-previews ()
  "Adjust the size of latex preview fragments when changing the
buffer's text scale."
  (pcase major-mode
    ('latex-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'category)
               'preview-overlay)
           (my/text-scale--resize-fragment ov))))
    ('org-mode
     (dolist (ov (overlays-in (point-min) (point-max)))
       (if (eq (overlay-get ov 'org-overlay-type)
               'org-latex-overlay)
           (my/text-scale--resize-fragment ov))))))

(defun my/text-scale--resize-fragment (ov)
  (overlay-put
   ov 'display
   (cons 'image
         (plist-put
          (cdr (overlay-get ov 'display))
          :scale (+ 1.0 (* 0.25 text-scale-mode-amount))))))

(add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)

(setq org-preview-latex-default-process 'dvisvgm)
#+end_src

** Org-modern
#+begin_src elisp :tangle yes
(setq org-modern-checkbox
      '((?X . "󰱒")
        (?\s . ""))
)

;; https://github.com/minad/org-modern
;; Minimal UI
(package-initialize)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)


(setq
;; Edit settings
org-auto-align-tags nil
org-tags-column 0
org-fold-catch-invisible-edits 'show-and-error
org-special-ctrl-a/e t
org-insert-heading-respect-content t

;; Org styling, hide markup etc.
org-hide-emphasis-markers t
org-pretty-entities t
org-ellipsis "…"
)

(global-org-modern-mode)

(defun my-org-faces ()
    (set-face-attribute 'org-todo nil :height 0.8)
    (set-face-attribute 'org-level-1 nil :height 1.2)
    (set-face-attribute 'org-level-2 nil :height 1.1))

(add-hook 'org-mode-hook #'my-org-faces)

#+end_src

** Anki
https://rgoswami.me/posts/anki-decks-orgmode/
#+begin_src elisp :tangle yes
;; (use-package anki-editor
;;   :after org-noter
;;   :config
;;   ; I like making decks
;;   (setq anki-editor-create-decks 't))
#+end_src

** Org-roam
#+begin_src elisp :tangle yes
(setq org-roam-v2-ack t)

(use-package! org-roam
  :after org
  :config
  (setq org-roam-v2-ack t)
  (setq org-roam-completion-everywhere t)
  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-insert-section
              #'org-roam-reflinks-insert-section
              #'org-roam-unlinked-references-insert-section))
  (org-roam-db-autosync-enable))

;; (map!  :leader
;;       :desc "test"
;;       "n r t" #'org-roam-ui-open)

#+end_src

*** Org-roam-ui
#+begin_src elisp :tangle yes
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Org-auto-tangle
#+begin_src elisp :tangle yes
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))

#+end_src

** Org-download

:TODO: Look into =org-download-image-attr-list=

#+begin_src elisp :tangle yes
(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
(setq org-download-image-html-width '150
      org-download-image-latex-width '150
      org-download-image-org-width '150)
#+end_src

** Images
When Using images in org-mode they can have a lot of attributes. This function folds them together if I encapsulate them in =:IMAGE_INFO:= and =:END:.=

#+begin_src elisp :tangle yes
;; (defun unpack-image-drawers (&rest r)
;;   "Replace drawers named \"IMAGE_INFO\" with their contents."
;;   (let* ((drawer-name "IMAGE_INFO")
;;         (save-string "#+ATTR_SAVE: true\n")
;;         (image-drawers (reverse (org-element-map (org-element-parse-buffer)
;;                                 'drawer
;;                               (lambda (el)
;;                                 (when (string= drawer-name (org-element-property :drawer-name el))
;;                                   el))))))
;;     (cl-loop for drawer in image-drawers do
;;              (setf (buffer-substring (org-element-property :begin drawer)
;;                                      (- (org-element-property :end drawer) 1))
;;                    (concat save-string
;;                            (buffer-substring (org-element-property :contents-begin drawer)
;;                                              (- (org-element-property :contents-end drawer) 1)))))))

;; (defun repack-image-drawers (&rest r)
;;   "Restore image drawers replaced using `unpack-image-drawers'."
;;   (let* ((drawer-name "IMAGE_INFO")
;;         (save-string "#+ATTR_SAVE: true\n")
;;         (image-paragraphs (reverse (org-element-map (org-element-parse-buffer)
;;                                'paragraph
;;                              (lambda (el)
;;                                (when (string= "true" (nth 0 (org-element-property :attr_save el)))
;;                                  el))))))
;;     (cl-loop for paragraph in image-paragraphs do
;;              (setf (buffer-substring (org-element-property :begin paragraph)
;;                                      (- (org-element-property :contents-begin paragraph) 1))
;;                    (concat ":" drawer-name ":\n"
;;                            (buffer-substring (+ (length save-string) (org-element-property :begin paragraph))
;;                                              (- (org-element-property :contents-begin paragraph) 1))
;;                            "\n:END:")))))


;; (defun apply-with-image-drawers-unpacked (f &rest r)
;;   "Replace drawers named \"IMAGE_INFO\" with their contents, run the function,
;; finally restore the drawers as they were. Also collapses all drawers before returning."
;;   (unpack-image-drawers)
;;   (apply f r)
;;   (repack-image-drawers)
;;   (org-hide-drawer-all))

;; (advice-add #'org-display-inline-images :around #'apply-with-image-drawers-unpacked)
;; (add-hook 'org-export-before-processing-hook 'unpack-image-drawers)
#+end_src


#+ATTR_ORG: :width 100 :center yes
[[file:Org-mode/2024-03-20_16-57-44_screenshot.png]]
